# Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
# This program and the accompanying materials are made available under the terms of the under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

<%=
  def validated_attempt_limit()
    if p('attempt_limit') <= 0
      raise 'Invalid upgrade_all_service_instances.attempt_limit - must be greater or equal 1'
    end
    p('attempt_limit')
  end

  def validated_max_in_flight()
    if p('max_in_flight') <= 0
      raise 'Invalid upgrade_all_service_instances.max_in_flight - must be greater or equal 1'
    end
    p('max_in_flight')
  end

  def validated_canaries()
    if p('canaries') < 0
      raise 'Invalid upgrade_all_service_instances.canaries - must be greater or equal 0'
    end
    p('canaries')
  end

  broker_link = link('broker')
  brokerCert = broker_link.p('tls.certificate', '')
  s = "s" unless brokerCert.empty?
  broker_address = "http#{s}://#{broker_link.instances[0].address}:#{broker_link.p('port')}"
  if_p('broker_uri') do |uri|
    broker_address = uri
  end

  def is_maintenance_info_present?
    link('broker').if_p('service_catalog.maintenance_info.version') do
      return true
    end

    link('broker').if_p('service_catalog.plans') do |plans|
      return plans
        .reject{ |plan| plan.nil? }
        .select { |plan| !plan.is_a?(Hash) || !plan.dig('maintenance_info', 'version') }.empty?
    end

    false
  end

  def normalise_cf_authentication(cf)
    cf_auth = cf['authentication'].clone
    unless cf_auth.nil?
      client_id = cf_auth.dig('client_credentials', 'client_id')
      client_secret = cf_auth.dig('client_credentials', 'secret')
      username = cf_auth.dig('user_credentials', 'username')
      password = cf_auth.dig('user_credentials','password')

      url = cf_auth['url']
      obj = {
        'url' => url,
        'authentication' => {
          'client_credentials' => {
            'client_id' => client_id,
            'client_secret' => client_secret
          },
          'user_credentials' => {
            'password' => password,
            'username' => username
          }
        }
      }
      cf['uaa'] = obj
    end
    cf['disable_ssl_cert_verification'] = link('broker').p('disable_ssl_cert_verification')
    cf.delete('authentication')
  end

  def cf_config
    link('broker').if_p('cf') do |cf|
      cf = link('broker').p('cf')
      normalise_cf_authentication(cf)

      return cf
    end
    nil
  end

  config = {
    "broker_api" => {
      "url" => broker_address,
      "authentication" => {
        "basic" => {
          "username" => link('broker').p('username'),
          "password" => link('broker').p('password')
        }
      },
      "tls" => {
        "disable_ssl_cert_verification" => p('tls.disable_ssl_cert_verification', false),
        "ca_cert" => p('tls.ca_cert', ''),
      }
    },
    "polling_interval" => p('polling_interval_seconds'),
    "attempt_interval" => p('attempt_interval_seconds'),
    "attempt_limit" => validated_attempt_limit,
    "request_timeout" => p('request_timeout'),
    "max_in_flight" => validated_max_in_flight,
    "canaries" => validated_canaries,
    "canary_selection_params" => p('canary_selection_params'),
    'cf' => cf_config,
    'maintenance_info_present' => is_maintenance_info_present?
  }.compact

  config.to_yaml
%>
